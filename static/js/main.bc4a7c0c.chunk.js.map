{"version":3,"sources":["components/main-menu/main-menu.module.scss","components/player-score/player-score.module.scss","components/game-options/game-options.module.scss","components/win-screen/win-screen.module.scss","components/score-screen/score-screen.module.scss","components/player-options/player-options.module.scss","components/reset-button/reset-button.module.scss","interfaces/IGameContext.ts","context/GameContext.tsx","custom-hooks/usePlayerScore.ts","context/Player1ContextProvider.tsx","context/Player2ContextProvider.tsx","components/player-score/player-score.component.tsx","components/score-screen/score-screen.component.tsx","custom-hooks/useIsLandscape.ts","components/player-options/player-options.component.tsx","components/game-options/game-options.component.tsx","components/reset-button/reset-button.component.tsx","components/main-menu/main-menu.component.tsx","components/win-screen/win-screen.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Winner","GameContext","React","createContext","GameContextProvider","props","gameContext","useState","maxScore","winner","none","bestOf","isStarted","state","setState","useEffect","gameStateStored","localStorage","getItem","JSON","parse","setItem","stringify","setWinner","prevState","setMaxScore","setBestOf","setIsStarted","started","useGameContextState","Provider","value","children","INITIAL_STATE","name","score","gamesWon","usePlayerScore","playerId","useContext","payerStored","onResetGame","onResetRound","window","addEventListener","removeEventListener","dispatchEvent","CustomEvent","scoreUp","scoreDown","updateName","Player1Context","Player1ContextProvider","playerContext","Player2Context","Player2ContextProvider","PlayerScore","playerNum","game","bind","useDrag","swipeY","swipe","className","styles","root","playerName","playerScore","Array","map","v","i","roundWon","key","won","String","ScoreScreen","player1","player2","checkIsLandscape","innerWidth","innerHeight","useIsLandscape","isLandscape","setIsLandscape","onResizeListener","PlayerOptions","type","onChange","e","target","maxScoresValues","bestOfValues","GameOptions","gameOption","htmlFor","id","Number","selected","ResetButton","onClick","confirm","MainMenu","title","players","playerHeading","WinScreen","p1","heading","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc4a7c0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"main-menu_root__gbbNW\",\"title\":\"main-menu_title__gIWiH\",\"players\":\"main-menu_players__3v2jy\",\"playerHeading\":\"main-menu_playerHeading__1OuMG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"player-score_root__2WlGd\",\"playerName\":\"player-score_playerName__1fJ3V\",\"playerScore\":\"player-score_playerScore__3VdiJ\",\"bestOf\":\"player-score_bestOf__2LjVV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"game-options_root__1VkP4\",\"gameOption\":\"game-options_gameOption__27L7A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"win-screen_root__2VlG3\",\"heading\":\"win-screen_heading__2eeB1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"score-screen_root__3JyKN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"player-options_root__1AmI3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"reset-button_root__1hlLh\"};","export enum Winner {none , p1 , p2 }\r\n\r\nexport type MaxScoreValues = 7 | 11 | 15 | 21;\r\nexport type BestOfValues = 3 | 5 | 7;\r\n\r\nexport interface IGameContextState {\r\n\tmaxScore: MaxScoreValues;\r\n\tbestOf: BestOfValues;\r\n\twinner: Winner;\r\n\tisStarted: boolean;\r\n}\r\n\r\nexport interface IGameContextMethods {\r\n\tsetWinner: (winner: keyof typeof Winner) => void;\r\n\tsetMaxScore: (maxScore: MaxScoreValues) => void;\r\n\tsetBestOf: (bestOf: BestOfValues) => void;\r\n\tsetIsStarted: (started: boolean) => void;\r\n}\r\n\r\ntype IGameContext = IGameContextState & IGameContextMethods\r\n\r\nexport default IGameContext;","import React, {useEffect, useState} from \"react\";\r\nimport IGameContext, {BestOfValues, IGameContextState, MaxScoreValues, Winner} from \"../interfaces/IGameContext\";\r\n\r\n\r\n// @ts-ignore\r\nexport const GameContext: React.Context<IGameContext> = React.createContext<IGameContext>();\r\n\r\n\r\nfunction useGameContextState(): IGameContext {\r\n\tconst [state, setState] = useState<IGameContextState>({\r\n\t\tmaxScore: 11,\r\n\t\twinner: Winner.none,\r\n\t\tbestOf: 3,\r\n\t\tisStarted: false\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst gameStateStored = localStorage.getItem(\"gameState\");\r\n\t\tgameStateStored && setState(JSON.parse(gameStateStored));\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem(\"gameState\", JSON.stringify(state));\r\n\t}, [state]);\r\n\r\n\tfunction setWinner(winner: keyof typeof Winner) {\r\n\t\tsetState(prevState => ({\r\n\t\t\t...prevState, winner: Winner[winner]\r\n\t\t}))\r\n\t}\r\n\r\n\tfunction setMaxScore(maxScore: MaxScoreValues) {\r\n\t\tsetState(prevState => ({\r\n\t\t\t...prevState, maxScore\r\n\t\t}))\r\n\t}\r\n\r\n\tfunction setBestOf(bestOf: BestOfValues) {\r\n\t\tsetState(prevState => ({\r\n\t\t\t...prevState, bestOf\r\n\t\t}))\r\n\t}\r\n\r\n\tfunction setIsStarted(started: boolean) {\r\n\t\tsetState(prevState => ({\r\n\t\t\t...prevState,\r\n\t\t\tisStarted: started\r\n\t\t}))\r\n\t}\r\n\r\n\treturn { ...state, setWinner, setMaxScore, setBestOf, setIsStarted }\r\n}\r\n\r\nconst GameContextProvider: React.FC = (props) => {\r\n\r\n\tconst gameContext = useGameContextState();\r\n\r\n\treturn (\r\n\t\t<GameContext.Provider value={gameContext} >\r\n\t\t\t{props.children}\r\n\t\t</GameContext.Provider>\r\n\t);\r\n};\r\n\r\nexport default GameContextProvider;","import IPlayerContext, {IPlayerState} from \"../interfaces/IPlayerContext\";\r\nimport {useContext, useEffect, useState} from \"react\";\r\nimport {GameContext} from \"../context/GameContext\";\r\nimport {Winner} from \"../interfaces/IGameContext\";\r\n\r\nconst INITIAL_STATE: IPlayerState = {\r\n\tname: \"\",\r\n\tscore: 0,\r\n\tgamesWon: 0\r\n};\r\n\r\nfunction usePlayerScore(playerId: keyof typeof Winner): IPlayerContext {\r\n\tconst {maxScore, bestOf, setWinner} = useContext(GameContext);\r\n\tconst [state, setState] = useState<IPlayerState>(INITIAL_STATE);\r\n\r\n\t// Load from local storage if available\r\n\tuseEffect(() => {\r\n\t\tconst payerStored = localStorage.getItem(playerId);\r\n\t\tpayerStored && setState(JSON.parse(payerStored));\r\n\r\n\t\tconst onResetGame = () => setState(prevState => {\r\n\t\t\tsetWinner(\"none\");\r\n\t\t\treturn ({\r\n\t\t\t\t...prevState, score: 0, gamesWon: 0\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tconst onResetRound = () => setState(prevState => ({\r\n\t\t\t...prevState, score: 0\r\n\t\t}));\r\n\r\n\t\twindow.addEventListener(\"resetGame\", onResetGame);\r\n\t\twindow.addEventListener(\"resetRound\", onResetRound);\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(\"resetGame\", onResetGame);\r\n\t\t\twindow.removeEventListener(\"resetRound\", onResetRound);\r\n\t\t}\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, []);\r\n\r\n\t// Update local storage on every state change\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem(playerId, JSON.stringify(state));\r\n\t}, [state, playerId]);\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tif(state.score === maxScore) {\r\n\r\n\t\t\tif (state.gamesWon + 1 === bestOf)\r\n\t\t\t\treturn setWinner(playerId);\r\n\r\n\r\n\t\t\tdispatchEvent(new CustomEvent(\"resetRound\"));\r\n\t\t\tsetState(prevState => ({\r\n\t\t\t\t...prevState, gamesWon: state.gamesWon + 1\r\n\t\t\t}));\r\n\t\t}\r\n\t}, [state.score]);\r\n\r\n\tconst scoreUp = () => setState(prevState => ({\r\n\t\t...prevState,\r\n\t\tscore: ++state.score\r\n\t}));\r\n\r\n\tconst scoreDown = () => setState(prevState => ({\r\n\t\t...prevState,\r\n\t\tscore: state.score === 0 ? state.score : --state.score\r\n\t}));\r\n\r\n\tconst updateName = (name: string) => setState(prevState => ({\r\n\t\t...prevState, name\r\n\t}));\r\n\r\n\treturn {\r\n\t\t...state, scoreUp, scoreDown, updateName\r\n\t};\r\n\r\n\r\n}\r\n\r\nexport default usePlayerScore;","import React from \"react\";\r\nimport IPlayerContext from \"../interfaces/IPlayerContext\";\r\nimport usePlayerScore from \"../custom-hooks/usePlayerScore\";\r\n\r\n// @ts-ignore\r\nexport const Player1Context: React.Context<IPlayerContext> = React.createContext<IPlayerContext>();\r\n\r\nconst Player1ContextProvider: React.FC = (props) => {\r\n\r\n\tconst playerContext = usePlayerScore(\"p1\");\r\n\r\n\treturn (\r\n\t\t<Player1Context.Provider value={playerContext}>\r\n\t\t\t{props.children}\r\n\t\t</Player1Context.Provider>\r\n\t);\r\n};\r\n\r\nexport default Player1ContextProvider;","import React from \"react\";\r\nimport IPlayerContext from \"../interfaces/IPlayerContext\";\r\nimport usePlayerScore from \"../custom-hooks/usePlayerScore\";\r\n\r\n// @ts-ignore\r\nexport const Player2Context: React.Context<IPlayerContext> = React.createContext<IPlayerContext>();\r\n\r\nconst Player2ContextProvider: React.FC = (props) => {\r\n\r\n\tconst playerContext = usePlayerScore(\"p2\");\r\n\r\n\treturn (\r\n\t\t<Player2Context.Provider value={playerContext}>\r\n\t\t\t{props.children}\r\n\t\t</Player2Context.Provider>\r\n\t);\r\n};\r\n\r\nexport default Player2ContextProvider;","import React, {FC, useContext} from \"react\";\r\nimport IPlayerContext from \"../../interfaces/IPlayerContext\";\r\nimport styles from \"./player-score.module.scss\";\r\nimport {useDrag} from \"react-use-gesture\";\r\nimport {GameContext} from \"../../context/GameContext\";\r\n\r\ninterface OwnProps {\r\n\tplayerNum: number;\r\n}\r\n\r\ntype Props = IPlayerContext & OwnProps;\r\n\r\nconst PlayerScore: FC<Props> = ({name, score, scoreUp, scoreDown, playerNum, gamesWon}) => {\r\n\tconst game = useContext(GameContext);\r\n\r\n\tconst bind = useDrag(({swipe}) => {\r\n\t\tconst swipeY = swipe[1];\r\n\t\tif (swipeY) swipeY < 0 ? scoreUp() : scoreDown();\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className={styles.root} {...bind()}>\r\n\t\t\t<h3 className={styles.playerName}>\r\n\t\t\t\t{name ? name : `Player ${playerNum}`}\r\n\t\t\t</h3>\r\n\t\t\t<div className={styles.playerScore}>{score}</div>\r\n\t\t\t<div className={styles.bestOf}>\r\n\t\t\t\t{[...new Array(game.bestOf)].map((v, i) => {\r\n\t\t\t\t\tlet roundWon = (i+1) <= gamesWon;\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\treturn (<span key={i} won={String(roundWon)} />);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default PlayerScore;\r\n","import React, {FC, useContext, useEffect} from 'react';\r\nimport styles from './score-screen.module.scss';\r\nimport {Player1Context} from \"../../context/Player1ContextProvider\";\r\nimport {Player2Context} from \"../../context/Player2ContextProvider\";\r\nimport PlayerScore from \"../player-score/player-score.component\";\r\nimport {GameContext} from \"../../context/GameContext\";\r\n\r\n\r\nconst ScoreScreen: FC = () => {\r\n\r\n\tconst game = useContext(GameContext);\r\n\tconst player1 = useContext(Player1Context);\r\n\tconst player2 = useContext(Player2Context);\r\n\r\n\tuseEffect(onPlayerScore, [player1.score, player2.score]);\r\n\r\n\treturn (\r\n        <div className={styles.root}>\r\n\t        <PlayerScore {...player1} playerNum={1}/>\r\n\t        <PlayerScore {...player2} playerNum={2}/>\r\n        </div>\r\n    );\r\n\r\n\tfunction onPlayerScore() {\r\n\t\tif ((!!player1.score || !!player2.score) && !game.isStarted)\r\n\t\t\tgame.setIsStarted(true);\r\n\r\n\t\tif (player1.score) {\r\n\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\nexport default ScoreScreen;","import {useEffect, useState} from \"react\";\r\n\r\nconst checkIsLandscape = () => window.innerWidth > window.innerHeight;\r\n\r\nfunction useIsLandscape() {\r\n\tconst [isLandscape, setIsLandscape] = useState(checkIsLandscape);\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener(\"ondeviceorientation\", onResizeListener);\r\n\t\twindow.addEventListener(\"resize\", onResizeListener);\r\n\t\twindow.addEventListener(\"orientationchange\", onResizeListener);\r\n\r\n\t\tfunction onResizeListener() {\r\n\t\t\tsetIsLandscape(checkIsLandscape)\r\n\t\t}\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(\"ondeviceorientation\", onResizeListener);\r\n\t\t\twindow.removeEventListener(\"resize\", onResizeListener);\r\n\t\t\twindow.removeEventListener(\"orientationchange\", onResizeListener);\r\n\t\t}\r\n\t}, []);\r\n\r\n\treturn isLandscape;\r\n}\r\n\r\n\r\nexport default useIsLandscape;","import React, {FC, useContext} from 'react';\r\nimport IPlayerContext from \"../../interfaces/IPlayerContext\";\r\nimport styles from './player-options.module.scss';\r\n\r\n\r\ninterface OwnProps {\r\n\tplayerContext:  React.Context<IPlayerContext>\r\n}\r\n\r\ntype Props = OwnProps;\r\n\r\nconst PlayerOptions: FC<Props> = ({playerContext}) => {\r\n\tconst {updateName, name} = useContext(playerContext);\r\n\r\n\tfunction handleChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n\t\tlet {value} = e.target;\r\n\t\tupdateName(value);\r\n\t}\r\n\r\n    return (\r\n\t    <div className={styles.root}>\r\n\t\t    <input type=\"text\" value={name} onChange={handleChange}/>\r\n\t    </div>\r\n    );\r\n};\r\n\r\n\r\nexport default PlayerOptions;","import React, {FC, useContext} from \"react\";\r\nimport {GameContext} from \"../../context/GameContext\";\r\nimport styles from \"./game-options.module.scss\";\r\nimport {BestOfValues, MaxScoreValues} from \"../../interfaces/IGameContext\";\r\n\r\n\r\nconst maxScoresValues: MaxScoreValues[] = [7, 11, 15, 21];\r\nconst bestOfValues: BestOfValues[] = [3, 5, 7];\r\n\r\nconst GameOptions: FC = () => {\r\n\tconst gameContext = useContext(GameContext);\r\n\r\n\tconst handleMaxScoreChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n\t\tlet {value} = e.target;\r\n\t\tgameContext.setMaxScore(Number(value) as MaxScoreValues);\r\n\t};\r\n\tconst handleBestOfChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n\t\tlet {value} = e.target;\r\n\t\tgameContext.setBestOf(Number(value) as BestOfValues);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={styles.root}>\r\n\t\t\t<div className={styles.gameOption}>\r\n\t\t\t\t<label htmlFor=\"game-points\">Points:</label>\r\n\t\t\t\t<select id=\"game-points\" onChange={handleMaxScoreChange}>\r\n\t\t\t\t\t{maxScoresValues.map(value => {\r\n\t\t\t\t\t\tlet selected = value === gameContext.maxScore;\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<option key={value} value={value} selected={selected}>\r\n\t\t\t\t\t\t\t\t{value}\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.gameOption}>\r\n\t\t\t\t<label htmlFor=\"game-best-of\">Best of:</label>\r\n\t\t\t\t<select id=\"game-best-of\" onChange={handleBestOfChange}>\r\n\t\t\t\t\t{bestOfValues.map(value => {\r\n\t\t\t\t\t\tlet selected = value === gameContext.bestOf;\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<option key={value} value={value} selected={selected}>\r\n\t\t\t\t\t\t\t\t{value}\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GameOptions;\r\n","import React, {FC, useContext} from 'react';\r\nimport {GameContext} from \"../../context/GameContext\";\r\nimport styles from './reset-button.module.scss';\r\n\r\n\r\nconst ResetButton: FC = () => {\r\n\r\n\tconst game = useContext(GameContext);\r\n\r\n\tconst onResetGame = () => {\r\n\t\tif (!!game.winner || window.confirm(\"Reset the game?\")) {\r\n\t\t\tdispatchEvent(new CustomEvent(\"resetGame\"));\r\n\t\t\tgame.setIsStarted(false);\r\n\t\t}\r\n\t};\r\n\r\n    return (\r\n\t    <button className={styles.root} onClick={onResetGame}>\r\n\t\t    Reset Game\r\n\t    </button>\r\n    );\r\n};\r\n\r\n\r\nexport default ResetButton;","import React, {FC, useContext} from 'react';\r\nimport styles from './main-menu.module.scss';\r\nimport PlayerOptions from \"../player-options/player-options.component\";\r\nimport {Player2Context} from \"../../context/Player2ContextProvider\";\r\nimport {Player1Context} from \"../../context/Player1ContextProvider\";\r\nimport {GameContext} from \"../../context/GameContext\";\r\nimport GameOptions from \"../game-options/game-options.component\";\r\nimport ResetButton from \"../reset-button/reset-button.component\";\r\n\r\n\r\nconst MainMenu: FC = () => {\r\n\r\n\tconst game = useContext(GameContext);\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n\t        <h1 className={styles.title}>Ping Pong Tournament</h1>\r\n\t        <div className={styles.players}>\r\n\t\t        <div>\r\n\t\t\t        <h3 className={styles.playerHeading}>Player 1</h3>\r\n\t\t\t        <PlayerOptions playerContext={Player1Context}/>\r\n\t\t        </div>\r\n\t\t        <div>\r\n\t\t\t        <h3 className={styles.playerHeading}>Player 2</h3>\r\n\t\t\t        <PlayerOptions playerContext={Player2Context}/>\r\n\t\t        </div>\r\n\t        </div>\r\n\t        {game.isStarted ?\r\n\t\t        <ResetButton/> :\r\n\t\t        <GameOptions/>\r\n\t        }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default MainMenu;","import React, {FC, useContext} from 'react';\r\nimport {GameContext} from \"../../context/GameContext\";\r\nimport {Player1Context} from \"../../context/Player1ContextProvider\";\r\nimport {Player2Context} from \"../../context/Player2ContextProvider\";\r\nimport {Winner} from \"../../interfaces/IGameContext\";\r\nimport IPlayerContext from \"../../interfaces/IPlayerContext\";\r\nimport styles from './win-screen.module.scss';\r\nimport ResetButton from \"../reset-button/reset-button.component\";\r\n\r\n\r\nconst WinScreen: FC = () => {\r\n\tconst game = useContext(GameContext);\r\n\tconst player1 = useContext(Player1Context);\r\n\tconst player2 = useContext(Player2Context);\r\n\tlet winner: IPlayerContext | undefined;\r\n\r\n\tif (game.winner)\r\n\t\twinner = game.winner === Winner.p1 ? player1 : player2;\r\n\r\n    return !!winner ? (\r\n        <div className={styles.root}>\r\n\t        <h3 className={styles.heading}>{winner.name}</h3>\r\n\t        <h4 className={styles.heading}>Wins</h4>\r\n\t        <ResetButton/>\r\n        </div>\r\n    ) : null;\r\n};\r\n\r\n\r\nexport default WinScreen;","import React from 'react';\nimport ScoreScreen from \"./components/score-screen/score-screen.component\";\nimport useIsLandscape from \"./custom-hooks/useIsLandscape\";\nimport MainMenu from \"./components/main-menu/main-menu.component\";\nimport WinScreen from \"./components/win-screen/win-screen.component\";\n\nconst App = () => {\n\tconst isLandscape = useIsLandscape();\n\treturn <>\n\t\t{ isLandscape ?\n\t\t <ScoreScreen/>\n\t\t : <MainMenu/> }\n\t\t<WinScreen/>\n\t\t</>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Player1ContextProvider from \"./context/Player1ContextProvider\";\nimport Player2ContextProvider from \"./context/Player2ContextProvider\";\nimport GameContextProvider from \"./context/GameContext\";\n\n\nconst AppWithContexts = () => (\n\t<GameContextProvider>\n\t\t<Player1ContextProvider>\n\t\t\t<Player2ContextProvider>\n\t\t\t\t<App/>\n\t\t\t</Player2ContextProvider>\n\t\t</Player1ContextProvider>\n\t</GameContextProvider>\n);\n\nReactDOM.render(<AppWithContexts />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}